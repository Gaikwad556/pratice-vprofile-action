name: artifact
on: workflow_dispatch

env:
  AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY}}
  AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY}}
  AWS_REGION: us-east-1
  AWS_BUCKET: ${{secrets.AWS_BUCKET}}
  AWS_CLUSTER: vprofile-eks
  ECR_REPO: vproapp

jobs:
  testing:
    runs-on: ubnuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: maven install
        id: install
        run: mvn install
      
      - name: maven checkstyle
        id: checkstyle
        run: mvn checkstyle:checkstyle

      - name: sonar code analysis
        run: sonar-scanner
           -Dsonar.host.url=${{ secrets.SONAR_URL }}
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT }}
           -Dsonar.sources=src/
           -Dsonar.junit.reportsPath=target/surefire-reports/
           -Dsonar.jacoco.reportsPath=target/jacoco.exec
           -Dsonar.java.checkstyle.reporsPath=target/checkstyle-result.xml
           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

      - name: quality gate
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL

  build_AND_run:
    runs-on: ubnuntu-latest
    needs: testing
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_SECRET_KEY}}
          secret_key: ${{ secrets.AWS_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          # cache_from: ${{ secrets.cache }}
          repo: ${{env.ECR_REPO}}
          region: us-east-1
          tags: latest,${{github.run_number}}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./

  DeployTOEKS:
    runs-on: ubnuntu-latest
    needs: build_AND_run
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v4
        with:   
          aws-region: ${{env.AWS_REGION}}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }} 

      - name: kube config
        id: kubeconfig
        run: aws eks update-kubeconfig --region ${{env.AWS_REGION}} --name ${{env.AWS_CLUSTER}}

      - name: Login to ECR
        run: kubectl create secret docker-registry regsecret --docker-server=${{secrets.REGISTRY}} --docker-username=AWS --docker-password=$(aws ecr get-login-password)


      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.10
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{env.AWS_REGION}}
          cluster-name: ${{AWS_CLUSTER}}
          # config-files: .github/values/dev.yaml
          chart-path: vprofilechar/
          namespace: default
          values: appimage=${{secrets.AWS_REGISTRY}}/${{env.ECR_REPO}},appnumber=${{github.run_number}}
          name: vprofile-stack
          




      

